#- user: name=taiga shell=/bin/bash groups=admins,developers append=yes
- user: name={{ taiga_username }} shell=/bin/bash

# Apt package installation of required software.
- name: Install Taiga dependencies.
  action: apt pkg={{ item }} state=present
  with_items:
    - build-essential
    - binutils-doc
    - autoconf
    - flex
    - bison
    - libjpeg-dev
    - libfreetype6-dev
    - zlib1g-dev
    - libzmq3-dev
    - libgdbm-dev
    - libncurses5-dev
    - automake
    - libtool
    - libffi-dev
    - curl
    - git
    - tmux
    - gettext

    - python3
    - python3-pip
    - python-dev
    - python3-dev
    - python-pip
    - virtualenvwrapper

    - libxml2-dev
    - libxslt-dev

    #this is necessary for compiling mod_wsgi for python3
    #- apache2-dev


- name: Enable Proxy module in apache
  apache2_module: state=present name=proxy_http



- name: Ensure Postgres Taiga Account
  become: yes
  become_user: postgres
  postgresql_user: name={{ taiga_username }}
                   state=present
                   role_attr_flags=LOGIN

- become: yes
  become_user: postgres
  postgresql_db: name={{ taiga_db_name }}
                 state=present
                 owner={{ taiga_username }}


  # - name: Check if repository has already been checked out
#   stat: path='{{ taiga_path }}'
#   register: check

- file: path='{{ taiga_path }}' state=directory mode=2755

- name: Check out source repository with git
  git: repo=https://github.com/taigaio/taiga-back.git dest='{{ taiga_path }}/taiga-back' version=stable update=no
#  when: not check.stat.exists
#  become_user: '{{ taiga_username }}'

- name: Update ownership for taiga_path
  file: dest='{{ taiga_path }}' owner='{{ taiga_username }}' group=staff recurse=yes

# - name: Make a virtualenv
#   shell: . /usr/share/virtualenvwrapper/virtualenvwrapper.sh && mkvirtualenv -p /usr/bin/python3.4 {{ taiga_path }}/virtualenv
#   args:
#     executable: /bin/bash

- name: Upgrade pip
  pip: executable=/usr/bin/pip3 name=pip state=latest



# was not able to get wsgi to work for taiga-back server

# #default wsgi module works for python2
# #in this case we want to make sure it works with python3
# #http://devmartin.com/blog/2015/02/how-to-deploy-a-python3-wsgi-application-with-apache2-and-debian/
# - name: Use pip3 to install mod_wsgi
#   pip: executable=/usr/bin/pip3 name=mod_wsgi state=latest

# - name: link to mod_wsgi
#   file: src=/usr/local/lib/python3.5/dist-packages/mod_wsgi/server/mod_wsgi-py35.cpython-35m-x86_64-linux-gnu.so dest=/usr/lib/apache2/modules/mod_wsgi.so state=link

# - name: Enable WSGI module in apache
#   apache2_module: state=present name=wsgi

# AddType text/html .py
# WSGIScriptAlias /api {{ taiga_path }}/taiga-back/taiga/wsgi.py
# WSGIPythonPath /usr/lib/python3:/usr/lib/python3/dist-packages:{{ taiga_path }}/taiga-back
# <Directory {{ taiga_path }}/taiga-back/taiga>
# <Files wsgi.py>
#     Require all granted
# </Files>
# </Directory>



#could also specify the virtualenv here if that is preferred
- name: pip install requirements
  become: yes
  #not able to install django with this user:
  #become_user: '{{ taiga_username }}'
  pip: executable=/usr/bin/pip3 chdir='{{ taiga_path }}/taiga-back' requirements=requirements.txt

- name: Configure Taiga (manage.py)
  shell: python3 manage.py migrate --noinput
  become: yes
  become_user: '{{ taiga_username }}'
  args:
    chdir: "{{ taiga_path }}/taiga-back"

- name: Configure Taiga (manage.py)
  shell: python3 manage.py loaddata initial_user
  become: yes
  become_user: '{{ taiga_username }}'
  args:
    chdir: "{{ taiga_path }}/taiga-back"

- name: Configure Taiga (manage.py)
  shell: python3 manage.py loaddata initial_project_templates
  become: yes
  become_user: '{{ taiga_username }}'
  args:
    chdir: "{{ taiga_path }}/taiga-back"

- name: Configure Taiga (manage.py)
  shell: python3 manage.py loaddata initial_role
  become: yes
  become_user: '{{ taiga_username }}'
  args:
    chdir: "{{ taiga_path }}/taiga-back"

- name: Configure Taiga (manage.py)
  shell: python3 manage.py compilemessages
  become: yes
  become_user: '{{ taiga_username }}'
  args:
    chdir: "{{ taiga_path }}/taiga-back"

- name: Configure Taiga (manage.py)
  shell: python3 manage.py collectstatic --noinput
  become: yes
  become_user: '{{ taiga_username }}'
  args:
    chdir: "{{ taiga_path }}/taiga-back"

- template: src=local.py dest='{{ taiga_path }}/taiga-back/settings/local.py'
  tags: taiga


# TAIGA-FRONT-DIST

- name: Check out front end source repository with git
  git: repo=https://github.com/taigaio/taiga-front-dist.git dest='{{ taiga_front_path }}' version=stable update=no
#  when: not check.stat.exists

- name: Update ownership for taiga_front_path
  file: dest='{{ taiga_front_path }}' owner=www-data group=staff recurse=yes

- template: src=conf.json dest='{{ taiga_front_path }}/dist/conf.json'
  tags: taiga

#configure apache...
#this is optional
#but makes hosting similar to what it would be in production

- name: check if taiga apache config already exists
  stat: path={{ taiga_apache_config }}
  register: original

# check if backup of taiga_apache_config exists
# if it already exists, we won't move it again
- name: check if taiga apached config backup already exists
  stat: path={{ taiga_apache_config }}.bkup
  register: backup

#note that "copy" command in ansible copies from ansible control to host
#one machine to the other
#here we just want to do the copy only on the destination host
- name: Make a backup copy of taiga apache config file
  shell: cp {{ taiga_apache_config }} {{ taiga_apache_config }}.bkup
  when: original.stat.exists and not backup.stat.exists

- template: src=taiga.conf dest={{ taiga_apache_config }}
  notify:
    - apache_restart
  tags: taiga

- name: a2ensite taiga
  command: a2ensite taiga
  notify:
    - apache_restart

- template: src=conf.json dest={{ taiga_front_path }}/dist/
  notify:
    - apache_restart
  tags: taiga



#TODO: this is not idempotent... will not complete on multiple runs
# - name: Add sample data (optional)
#   shell: python3 manage.py sample_data
#   become: yes
#   become_user: '{{ taiga_username }}'
#   args:
#     chdir: "{{ taiga_path }}/taiga-back"


#*2016.10.13 12:22:40
#TODO:
#final steps (6.) in this guide:
#http://taigaio.github.io/taiga-doc/dist/setup-production.html
#taiga-back should run under an application server which in turn should be executed and monitored by a process manager. For this task we will use gunicorn and circus respectivelly.
#taiga-front seems to work well enough with apache in this case
#for now I have been launching taiga-back manually:

#this is useful for debugging purposes (running:
# sudo su - taiga
# cd /srv/taiga/taiga-back
# python3 manage.py runserver 0.0.0.0:8000
- name: Allow debugging server
  ufw: rule=allow port=8000

#ran into some trouble trying to get mod_wsgi to serve taiga-back
#see previous notes on that if that is the desired route
