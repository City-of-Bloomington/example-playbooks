---
# tasks file for cob.content_converter

# Apt package installation of required software.
- name: Install django dependencies.
  action: apt pkg={{ item }} state=present
  with_items:
    - python-pip
    - python2.7-dev
    # via: https://github.com/docker-library/django/blob/master/2.7/Dockerfile
    - gcc
    - gettext
    - mysql-client
    - libmysqlclient-dev
    #if you're using postgres or sqlite3:
    #- postgresql-client
    #- libpq-dev
    #- sqlite3
    
    - libapache2-mod-wsgi    

# enables the Apache2 module "wsgi"
- apache2_module: state=present name=wsgi

- name: Upgrade pip
  pip: name=pip state=latest
  
- name: pip install mysqlclient
  pip: name=mysqlclient

#if using postgres db:
#- name: pip install psycopg2
#  pip: name=psycopg2

- name: pip install django
  pip: name=django version=1.9.7    

- name: check if repository has already been checked out
  stat: path='{{ converter_path }}'
  register: check

- git: repo=https://github.com/City-of-Bloomington/content-converter.git dest='{{ converter_path }}'
  when: not check.stat.exists

#TODO:
# this won't work if the path is a directory on a VM shared with host
# way to check for that?
#- file: path={{ converter_path }} state=directory owner=www-data group=staff recurse=yes mode=2770

  
#mysql config should be handled earlier now by mysql role directly
- template: src=mysql.cnf dest='{{ converter_path }}/converter/mysql.cnf'
  tags: converter

#update the settings.py file to use the path to mysql.cnf
# Fully quoted because of the ': ' on the line. See the Gotchas in the YAML docs.
- lineinfile:
    dest: '{{ converter_path }}/converter/settings.py'
    regexp: 'read_default_file'
    line: "            'read_default_file': '{{ converter_path }}/converter/mysql.cnf',"
  
#check if backup of 000-default.conf exists
#create a copy if not
# if it already exists, we won't move it again
- name: check if apached config backup already exists
  stat: path={{ apache_config }}.bkup
  register: check

#note that "copy" in ansible copies from ansible host to client
#one machine to the other
#here we just want to do the copy only on the client 
- name: Make a backup copy of apache config file
  shell: cp {{ apache_config }} {{ apache_config }}.bkup
  when: not check.stat.exists

- template: src=000-default.conf dest={{ apache_config }}
  notify:
    - restart apache
  tags: converter
  
#this is useful for debugging purposes (running:
# cd /srv/content_converter/src
# python code.py 5000
- name: Allow debugging server
  ufw: rule=allow port=5000

# initialize the database by running migrations
# do initial build
- shell: python manage.py migrate
  args:
    chdir: "{{ converter_path }}"

# make departments
- shell: python make_departments.py
  args:
    chdir: "{{ converter_path }}/scripts"
